## Graphite local_settings.py
# Edit this file to customize the default Graphite webapp settings
#
# Additional customizations to Django settings can be added to this file as well

#####################################
# General Configuration #
#####################################
# Set your local timezone (Django's default is America/Chicago)
# If your graphs appear to be offset by a couple hours then this probably
# needs to be explicitly set to your local timezone.
TIME_ZONE = '<%= @timezone %>'

# Override this to provide documentation specific to your Graphite deployment
DOCUMENTATION_URL = "<%= @documentation_url %>"

# Logging
LOG_RENDERING_PERFORMANCE = <%= @log_rendering_performance %>
LOG_CACHE_PERFORMANCE = <%= @log_cache_performance %>
LOG_METRIC_ACCESS = <%= @log_metric_access %>

# Enable full debug page display on exceptions (Internal Server Error pages)
DEBUG = <%= @debug_error_pages %>

# If using RRD files and rrdcached, set to the address or socket of the daemon
FLUSHRRDCACHED = '<%= @flush_rrd_cached %>'

# This lists the memcached servers that will be used by this webapp.
# If you have a cluster of webapps you should ensure all of them
# have the *exact* same value for this setting. That will maximize cache
# efficiency. Setting MEMCACHE_HOSTS to be empty will turn off use of
# memcached entirely.
#
# You should not use the loopback address (127.0.0.1) here if using clustering
# as every webapp in the cluster should use the exact same values to prevent
# unneeded cache misses. Set to [] to disable caching of images and fetched data
MEMCACHE_HOSTS = [<%= @memcache_hosts.collect{|x| '"' + x + '"'}.join(', ') %>]
DEFAULT_CACHE_DURATION = <%= @memcache_default_duration %> # Cache images and data for 1 minute


#####################################
# Filesystem Paths #
#####################################
# Change only GRAPHITE_ROOT if your install is merely shifted from /opt/graphite
# to somewhere else
#GRAPHITE_ROOT = '/opt/graphite'

# Most installs done outside of a separate tree such as /opt/graphite will only
# need to change these three settings. Note that the default settings for each
# of these is relative to GRAPHITE_ROOT
CONF_DIR = '<%= @conf_dir %>'
STORAGE_DIR = '<%= @storage_dir %>'
CONTENT_DIR = '<%= @content_dir %>'

# To further or fully customize the paths, modify the following. Note that the
# default settings for each of these are relative to CONF_DIR and STORAGE_DIR
#
## Webapp config files
DASHBOARD_CONF = '<%= @dashboard_conf %>'
GRAPHTEMPLATES_CONF = '<%= @graph_templates_conf %>'

## Data directories
# NOTE: If any directory is unreadable in DATA_DIRS it will break metric browsing
WHISPER_DIR = '<%= @whisper_dir %>'
RRD_DIR = '<%= @rrd_dir %>'
DATA_DIRS = [<%= @data_dirs.collect{|x| '"' + x + '"'}.join(', ') %>] # Default: set from the above variables
LOG_DIR = '<%= @log_dir %>'
INDEX_FILE = '<%= @index_file %>'  # Search index file


#####################################
# Email Configuration #
#####################################
# This is used for emailing rendered Graphs
# Default backend is SMTP
EMAIL_BACKEND = '<%= @email_backend %>'
EMAIL_HOST = '<%= @email_host %>'
EMAIL_PORT = <%= @email_port %>
EMAIL_HOST_USER = '<%= @email_host_user %>'
EMAIL_HOST_PASSWORD = '<%= @email_host_password %>'
EMAIL_USE_TLS = <%= @email_use_tls %>
# To drop emails on the floor, enable the Dummy backend:
#EMAIL_BACKEND = 'django.core.mail.backends.dummy.EmailBackend'


#####################################
# Authentication Configuration #
#####################################
## LDAP / ActiveDirectory authentication setup
USE_LDAP_AUTH = <%= @use_ldap_auth %>
#LDAP_SERVER = "ldap.mycompany.com"
#LDAP_PORT = 389
#	OR
LDAP_URI = "<%= @ldap_uri %>"
LDAP_SEARCH_BASE = "<%= @ldap_search_base %>"
LDAP_BASE_USER = "<%= @ldap_base_user %>"
LDAP_BASE_PASS = "<%= @ldap_base_password %>"
LDAP_USER_QUERY = "<%= @ldap_user_query %>"  #For Active Directory use "(sAMAccountName=%s)"
#
# If you want to further customize the ldap connection options you should
# directly use ldap.set_option to set the ldap module's global options.
# For example:
#
#import ldap
#ldap.set_option(ldap.OPT_X_TLS_REQUIRE_CERT, ldap.OPT_X_TLS_ALLOW)
#ldap.set_option(ldap.OPT_X_TLS_CACERTDIR, "/etc/ssl/ca")
#ldap.set_option(ldap.OPT_X_TLS_CERTFILE, "/etc/ssl/mycert.pem")
#ldap.set_option(ldap.OPT_X_TLS_KEYFILE, "/etc/ssl/mykey.pem")
# See http://www.python-ldap.org/ for further details on these options.

## REMOTE_USER authentication. See: https://docs.djangoproject.com/en/dev/howto/auth-remote-user/
USE_REMOTE_USER_AUTHENTICATION = <%= @use_remote_user_auth %>

# Override the URL for the login link (e.g. for django_openid_auth)
LOGIN_URL = '<%= @login_url %>'


##########################
# Database Configuration #
##########################
# By default sqlite is used. If you cluster multiple webapps you will need
# to setup an external database (such as MySQL) and configure all of the webapp
# instances to use the same database. Note that this database is only used to store
# Django models such as saved graphs, dashboards, user preferences, etc.
# Metric data is not stored here.
#
# DO NOT FORGET TO RUN 'manage.py syncdb' AFTER SETTING UP A NEW DATABASE
#
# The following built-in database engines are available:
#  django.db.backends.postgresql          # Removed in Django 1.4
#  django.db.backends.postgresql_psycopg2
#  django.db.backends.mysql
#  django.db.backends.sqlite3
#  django.db.backends.oracle
#
# The default is 'django.db.backends.sqlite3' with file 'graphite.db'
# located in STORAGE_DIR
#
# Users with Django 1.2 or greater should use the new dictionary
# specification as the old database specification style is removed in 1.4
DATABASES = {
    'default': {
        'NAME': '<%= @db_name %>',
        'ENGINE': '<%= @db_engine %>',
        'USER': '<%= @db_user %>',
        'PASSWORD': '<%= @db_password %>',
        'HOST': '<%= @db_host %>',
        'PORT': '<%= @db_port %>'
    }
}
#
# Users still on Django 1.1 must use the old method instead:
#DATABASE_ENGINE = 'django.db.backends.mysql'
#DATABASE_NAME = 'graphite'      # Or path to the database file if using sqlite3
#DATABASE_USER = 'graphite'
#DATABASE_PASSWORD = 'graphite-is-awesome'
#DATABASE_HOST = 'mysql.mycompany.com'
#DATABASE_PORT = '3306'


#########################
# Cluster Configuration #
#########################
# (To avoid excessive DNS lookups you want to stick to using IP addresses only in this entire section)
#
# This should list the IP address (and optionally port) of the webapp on each
# remote server in the cluster. These servers must each have local access to
# metric data. Note that the first server to return a match for a query will be
# used.
CLUSTER_SERVERS = [<%= @cluster_servers.collect{|x| '"' + x + '"'}.join(', ') %>]

## These are timeout values (in seconds) for requests to remote webapps
REMOTE_STORE_FETCH_TIMEOUT = <%= @cluster_fetch_timeout %>   # Timeout to fetch series data
REMOTE_STORE_FIND_TIMEOUT = <%= @cluster_find_timeout %>  # Timeout for metric find requests
REMOTE_STORE_RETRY_DELAY = <%= @cluster_retry_delay %>    # Time before retrying a failed remote webapp
REMOTE_FIND_CACHE_DURATION = <%= @cluster_cache_duration %> # Time to cache remote metric find results

## Remote rendering settings
# Set to True to enable rendering of Graphs on a remote webapp
REMOTE_RENDERING = <%= @remote_rendering %>
# List of IP (and optionally port) of the webapp on each remote server that
# will be used for rendering. Note that each rendering host should have local
# access to metric data or should have CLUSTER_SERVERS configured
RENDERING_HOSTS = [<%= @remote_rendering_hosts.collect{|x| '"' + x + '"'}.join(', ') %>]
REMOTE_RENDER_CONNECT_TIMEOUT = <%= @remote_render_con_timeout %>

# If you are running multiple carbon-caches on this machine (typically behind a relay using
# consistent hashing), you'll need to list the ip address, cache query port, and instance name of each carbon-cache
# instance on the local machine (NOT every carbon-cache in the entire cluster). The default cache query port is 7002
# and a common scheme is to use 7102 for instance b, 7202 for instance c, etc.
#
# You *should* use 127.0.0.1 here in most cases
CARBONLINK_HOSTS = [<%= @local_carbon_instances.collect{|x| '"' + x + '"'}.join(', ') %>]
CARBONLINK_TIMEOUT = <%= @local_carbon_timeout %>

#####################################
# Additional Django Settings #
#####################################
# Uncomment the following line for direct access to Django settings such as
# MIDDLEWARE_CLASSES or APPS
#from graphite.app_settings import *

